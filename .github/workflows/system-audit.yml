name: System Health Audit

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      priority:
        description: 'Audit priority level'
        required: false
        default: 'CRITICAL'
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM
          - LOW
      tasks:
        description: 'Specific tasks to run (comma-separated)'
        required: false
        type: string

jobs:
  audit:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create reports directory
        run: mkdir -p qa/reports
        
      - name: Run critical audit
        if: github.event_name == 'schedule' || github.event.inputs.priority == 'CRITICAL'
        run: npm run audit:critical
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          
      - name: Run revenue audit
        if: github.event_name == 'schedule' || github.event.inputs.priority == 'HIGH'
        run: npm run audit:revenue
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          
      - name: Run security audit
        if: github.event_name == 'schedule' || github.event.inputs.priority == 'HIGH'
        run: npm run audit:security
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          
      - name: Run full audit
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.priority == 'LOW'
        run: npm run audit:full
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          
      - name: Upload audit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports-${{ matrix.node-version }}
          path: qa/reports/
          retention-days: 30
          
      - name: Comment PR with audit results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let status = '✅ Audit passed';
            let details = 'All system health checks completed successfully';
            let criticalIssues = 0;
            
            try {
              // Look for latest audit results
              const reportsDir = 'qa/reports';
              if (fs.existsSync(reportsDir)) {
                const files = fs.readdirSync(reportsDir)
                  .filter(file => file.startsWith('audit-results-'))
                  .sort()
                  .reverse();
                
                if (files.length > 0) {
                  const latestReport = JSON.parse(fs.readFileSync(path.join(reportsDir, files[0]), 'utf8'));
                  criticalIssues = latestReport.summary.critical_issues;
                  
                  if (criticalIssues > 0) {
                    status = '🚨 Critical issues detected';
                    details = `${criticalIssues} critical issues found requiring immediate attention`;
                  } else if (latestReport.summary.failed > 0) {
                    status = '⚠️ Some issues detected';
                    details = `${latestReport.summary.failed} issues found, monitoring required`;
                  }
                }
              }
            } catch (error) {
              console.log('Could not parse audit results:', error.message);
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## System Health Audit Results
              
              **Status:** ${status}
              
              **Details:** ${details}
              
              **Node Version:** ${{ matrix.node-version }}
              
              **Timestamp:** ${new Date().toISOString()}
              
              **Critical Issues:** ${criticalIssues}
              
              ---
              *Automated system audit by AdTopia Revenue Empire Orchestration*`
            });
            
      - name: Send Slack notification on critical issues
        if: failure() && github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#adtopia-alerts'
          text: '🚨 Critical system issues detected in AdTopia revenue pipeline!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send email alert on critical issues
        if: failure() && github.event_name == 'schedule'
        run: |
          echo "Critical system issues detected" | mail -s "AdTopia System Alert" omniumai357@gmail.com
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}

  performance-audit:
    runs-on: ubuntu-latest
    needs: audit
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: |
          npm start &
          sleep 10
          
      - name: Run performance audit
        run: npm run diagnose:app -- --route=/app --verbose
        env:
          NEXT_PUBLIC_SITE_URL: http://localhost:3000
          
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: qa/reports/
          retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    needs: audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for high-severity vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0'; then
            echo "High-severity vulnerabilities found"
            exit 1
          else
            echo "No high-severity vulnerabilities found"
          fi
          
      - name: Upload security report
        if: always()
        run: |
          npm audit --json > qa/reports/security-audit.json
          echo "Security audit completed at $(date)" > qa/reports/security-summary.txt
          
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: qa/reports/security-*
          retention-days: 30
