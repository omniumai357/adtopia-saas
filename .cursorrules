# AdTopia / BizBox / Omnia Platform - Cursor Rules

## Operating Mode
This workspace runs the AdTopia / BizBox / GammaFlow multi-product SaaS under Omnia Group LLC.

Before performing *any* action involving credentials, Stripe, Supabase, or Vercel:
1. Run verification commands (no prompting for credentials unless missing):
   - `bash scripts/preflight.sh` → must show all ✅ checks
   - `stripe whoami` → must show **Omnia Group LLC**, Mode: **Live**
   - `supabase secrets list | grep STRIPE_SECRET_KEY` → must return a value
   - `vercel env ls` → must list STRIPE + SUPABASE envs
2. If verification passes, **DO NOT ASK** for credentials again.
3. Always reason using facts from logs, not assumptions.
4. All destructive actions require a rollback plan and confirmation.

## Context Awareness
- Front-end: `adtopia-saas` (Vercel)
- Client portal: `bizbox-ai` (Vercel)
- Backend: Supabase (DB + Auth + Edge Functions)
- Payments: Stripe (Omnia Group LLC acct_1S7JMzCs9rGgIdMi)

## Security Protocol
- Never print or expose secrets.
- Confirm live context before any Stripe commands.
- Use existing Supabase/Vercel secrets for runtime auth.
- Maintain RLS integrity (no public write policies).
- Do not move `pg_net` schema; hosted environments block it.

## North Star
Ship real, revenue-producing features → shortest path to the nearest dollar.  
Every change must advance one of:
- Faster customer onboarding
- More efficient ad production
- Stable, automated billing and analytics

## Decision Loop
Ask yourself:
- 🧠 *Verify*: Is the state confirmed from command or log?
- ⚙️ *Execute*: Can it be safely applied (idempotent, reversible)?
- 📊 *Measure*: Will this action increase stability, conversion, or scale?

If the answer to any is "no", stop and verify before continuing.

## Build Strategy Meta-Prompts

### A. When building features
Goal: Implement the minimal viable version of the feature that gets us closer to customer acquisition or retention.
Check dependencies → Confirm secrets → Generate code → Test locally → Commit.
Never add new services unless the gain > complexity.

### B. When debugging
Goal: Identify root cause using logs & context, not guesses.
Step 1: Verify environment context (Stripe/Supabase/Vercel).
Step 2: Inspect logs (Supabase Edge logs, Vercel build logs, Stripe dashboard).
Step 3: Reproduce issue locally with safe data.
Step 4: Fix & retest. Log the resolution.

### C. When deploying
Goal: Ship tested, reversible changes to production safely.
Preflight check ✅
Commit message format: [scope]: [summary] (#issue-id)
Run: vercel deploy --prebuilt
Monitor Supabase logs & Stripe webhooks post-deploy.

## Cursor Context Shortcut Prompts
- 🔍 Verify all connections: "Run preflight verification and confirm Omnia Group LLC live session."
- 💳 Stripe sanity check: "List all products and prices from Omnia Group LLC without re-authenticating; confirm live mode."
- 🧠 Schema integrity: "Describe all Supabase tables with RLS policies; list public policies that allow read access."
- 🚀 Deployment: "Run preflight, build, and deploy main to Vercel using stored env vars."
- ⚖️ Security: "Check for any edge function using esm.sh; update to npm:@spec imports."
- 🛡️ Monitoring: "Ensure security-alerts edge function is enabled and sending to SECURITY_WEBHOOK_URL."

## North Star Reinforcement
Every change must pass the "North Star Test":
1. Does this reduce friction for a paying customer or partner?
2. Does this create, protect, or measure revenue?
3. Can it be deployed with <3 commands?

If not, park it in /roadmap/postlaunch.md and refocus on monetization or stability.
